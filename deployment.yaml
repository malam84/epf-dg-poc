kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  name: postgresql
spec:
  strategy:
    type: Recreate
    recreateParams:
      timeoutSeconds: 600
    resources: {}
    activeDeadlineSeconds: 21600
  triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - postgresql
        from:
          kind: ImageStreamTag
          namespace: openshift
          name: 'postgresql:12-el8'
        lastTriggeredImage: 'image-registry.openshift-image-registry.svc:5000/openshift/postgresql@sha256:aff65d01812645d5c63a9dce39e7e6dc548b19f34f336be08f5a4b58ecdd843e'
    - type: ConfigChange
  replicas: 1
  revisionHistoryLimit: 10
  test: false
  selector:
    name: postgresql
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: postgresql
    spec:
      volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql
      containers:
        - resources:
            limits:
              memory: 512Mi
          readinessProbe:
            exec:
              command:
                - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          name: postgresql
          livenessProbe:
            exec:
              command:
                - /usr/libexec/check-container
                - '--live'
            initialDelaySeconds: 120
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: database-user
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: database-password
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: database-name
          securityContext:
            capabilities: {}
            privileged: false
          ports:
            - containerPort: 5432
              protocol: TCP
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/pgsql/data
          terminationMessagePolicy: File
          image: 'image-registry.openshift-image-registry.svc:5000/openshift/postgresql@sha256:aff65d01812645d5c63a9dce39e7e6dc548b19f34f336be08f5a4b58ecdd843e'
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler


---
kind: Service
apiVersion: v1
metadata:
  name: postgresql
  namespace: epf-postgresql
spec:
  ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
  internalTrafficPolicy: Cluster
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  sessionAffinity: None
  selector:
    name: postgresql


  ---
  kind: Secret
apiVersion: v1
metadata:
  name: postgresql
  namespace: epf-postgresql
  uid: ae65b5c3-2ccc-4087-8ecb-052b71bc45a9
  resourceVersion: '186682'
  creationTimestamp: '2025-04-14T10:47:01Z'
  labels:
    template: postgresql-persistent-template
    template.openshift.io/template-instance-owner: 29795c5d-c1cc-437d-8581-3b3d55d3a8ec
  annotations:
    template.openshift.io/expose-database_name: '{.data[''database-name'']}'
    template.openshift.io/expose-password: '{.data[''database-password'']}'
    template.openshift.io/expose-username: '{.data[''database-user'']}'
  managedFields:
    - manager: openshift-controller-manager
      operation: Update
      apiVersion: v1
      time: '2025-04-14T10:47:01Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:data':
          .: {}
          'f:database-name': {}
          'f:database-password': {}
          'f:database-user': {}
        'f:metadata':
          'f:annotations':
            .: {}
            'f:template.openshift.io/expose-database_name': {}
            'f:template.openshift.io/expose-password': {}
            'f:template.openshift.io/expose-username': {}
          'f:labels':
            .: {}
            'f:template': {}
            'f:template.openshift.io/template-instance-owner': {}
        'f:type': {}
data:
  database-name: a3dzcA==
  database-password: cGFzc3dvcmQ=
  database-user: dXNlckpLWA==
type: Opaque
----
kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewBuild
  resourceVersion: '232734'
  name: kwsp
  uid: ae6d7203-cc03-4325-a62d-a051d33261f1
  creationTimestamp: '2025-04-14T04:00:11Z'
  generation: 33
  managedFields:
    - manager: oc
      operation: Update
      apiVersion: build.openshift.io/v1
      time: '2025-04-14T04:00:11Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:openshift.io/generated-by': {}
          'f:labels':
            .: {}
            'f:build': {}
        'f:spec':
          'f:runPolicy': {}
          'f:source':
            'f:git':
              .: {}
              'f:uri': {}
            'f:type': {}
          'f:strategy':
            'f:dockerStrategy':
              .: {}
              'f:from': {}
            'f:type': {}
          'f:triggers': {}
    - manager: Mozilla
      operation: Update
      apiVersion: build.openshift.io/v1
      time: '2025-04-15T01:19:06Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:spec':
          'f:output':
            'f:to': {}
    - manager: openshift-apiserver
      operation: Update
      apiVersion: build.openshift.io/v1
      time: '2025-04-15T01:19:18Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:status':
          'f:imageChangeTriggers': {}
          'f:lastVersion': {}
  namespace: kwsp-apps
  labels:
    build: kwsp
spec:
  nodeSelector: null
  output:
    to:
      kind: ImageStreamTag
      name: 'kwsp:8.0'
  resources: {}
  successfulBuildsHistoryLimit: 5
  failedBuildsHistoryLimit: 5
  strategy:
    type: Docker
    dockerStrategy:
      from:
        kind: ImageStreamTag
        name: 'java-runtime:openjdk-17-ubi8'
  postCommit: {}
  source:
    type: Git
    git:
      uri: 'https://github.com/malam84/epf-dg-poc.git'
  triggers:
    - type: GitHub
      github:
        secret: aPAnyPoFM5b3ktRnZHc_
    - type: Generic
      generic:
        secret: Ti0c0Uh1fCrwDpIjfGHQ
    - type: ConfigChange
    - type: ImageChange
      imageChange: {}
  runPolicy: Serial
status:
  lastVersion: 24
  imageChangeTriggers:
    - lastTriggeredImageID: 'image-registry.openshift-image-registry.svc:5000/openshift/java-runtime@sha256:8a5192fddca3ef71c29a146b41232a40c957c48505fe793baf678a11208663de'
      from:
        name: 'java-runtime:openjdk-17-ubi8'
      lastTriggerTime: null
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/route-disabled: 'false'
    deployment.kubernetes.io/revision: '19'
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"kwsp:latest","namespace":"kwsp-apps"},"fieldPath":"spec.template.spec.containers[?(@.name==\"kwsp\")].image","paused":"false"}]'
    openshift.io/generated-by: OpenShiftWebConsole
  resourceVersion: '250129'
  name: kwsp
  uid: 26cbf770-5f24-4484-9a72-54297e314438
  creationTimestamp: '2025-04-14T04:25:45Z'
  generation: 47
  managedFields:
    - manager: Mozilla
      operation: Update
      apiVersion: apps/v1
      time: '2025-04-15T01:24:05Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:alpha.image.policy.openshift.io/resolve-names': {}
            'f:app.openshift.io/route-disabled': {}
            'f:image.openshift.io/triggers': {}
            'f:openshift.io/generated-by': {}
          'f:labels':
            'f:app.openshift.io/runtime': {}
            'f:app': {}
            'f:app.kubernetes.io/name': {}
            .: {}
            'f:app.kubernetes.io/part-of': {}
            'f:app.openshift.io/runtime-version': {}
            'f:app.openshift.io/runtime-namespace': {}
            'f:app.kubernetes.io/instance': {}
            'f:app.kubernetes.io/component': {}
        'f:spec':
          'f:progressDeadlineSeconds': {}
          'f:revisionHistoryLimit': {}
          'f:selector': {}
          'f:strategy':
            'f:rollingUpdate':
              .: {}
              'f:maxSurge': {}
              'f:maxUnavailable': {}
            'f:type': {}
          'f:template':
            'f:metadata':
              'f:annotations':
                .: {}
                'f:openshift.io/generated-by': {}
                'f:openshift.openshift.io/restartedAt': {}
              'f:labels':
                .: {}
                'f:app': {}
                'f:deployment': {}
            'f:spec':
              'f:containers':
                'k:{"name":"kwsp"}':
                  'f:image': {}
                  'f:volumeMounts':
                    .: {}
                    'k:{"mountPath":"/deployments/config"}':
                      .: {}
                      'f:mountPath': {}
                      'f:name': {}
                      'f:readOnly': {}
                  'f:terminationMessagePolicy': {}
                  .: {}
                  'f:resources': {}
                  'f:terminationMessagePath': {}
                  'f:imagePullPolicy': {}
                  'f:ports':
                    .: {}
                    'k:{"containerPort":8080,"protocol":"TCP"}':
                      .: {}
                      'f:containerPort': {}
                      'f:protocol': {}
                    'k:{"containerPort":8443,"protocol":"TCP"}':
                      .: {}
                      'f:containerPort': {}
                      'f:protocol': {}
                  'f:name': {}
              'f:dnsPolicy': {}
              'f:restartPolicy': {}
              'f:schedulerName': {}
              'f:securityContext': {}
              'f:terminationGracePeriodSeconds': {}
              'f:volumes':
                .: {}
                'k:{"name":"application-config"}':
                  .: {}
                  'f:configMap':
                    .: {}
                    'f:defaultMode': {}
                    'f:items': {}
                    'f:name': {}
                  'f:name': {}
    - manager: kube-controller-manager
      operation: Update
      apiVersion: apps/v1
      time: '2025-04-15T02:40:08Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            'f:deployment.kubernetes.io/revision': {}
        'f:status':
          'f:conditions':
            .: {}
            'k:{"type":"Available"}':
              .: {}
              'f:lastTransitionTime': {}
              'f:lastUpdateTime': {}
              'f:message': {}
              'f:reason': {}
              'f:status': {}
              'f:type': {}
            'k:{"type":"Progressing"}':
              .: {}
              'f:lastTransitionTime': {}
              'f:lastUpdateTime': {}
              'f:message': {}
              'f:reason': {}
              'f:status': {}
              'f:type': {}
          'f:observedGeneration': {}
          'f:replicas': {}
          'f:unavailableReplicas': {}
          'f:updatedReplicas': {}
      subresource: status
  namespace: kwsp-apps
  labels:
    app: kwsp
    app.kubernetes.io/component: kwsp
    app.kubernetes.io/instance: kwsp
    app.kubernetes.io/name: kwsp
    app.kubernetes.io/part-of: kwsp-app
    app.openshift.io/runtime: kwsp
    app.openshift.io/runtime-namespace: kwsp-apps
    app.openshift.io/runtime-version: latest
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kwsp
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: kwsp
        deployment: kwsp
      annotations:
        openshift.io/generated-by: OpenShiftWebConsole
        openshift.openshift.io/restartedAt: '2025-04-14T10:28:27.275Z'
    spec:
      volumes:
        - name: application-config
          configMap:
            name: application-properties
            items:
              - key: application.properties
                path: application.properties
            defaultMode: 420
      containers:
        - name: kwsp
          image: 'image-registry.openshift-image-registry.svc:5000/kwsp-apps/kwsp@sha256:22afdbbbbd8d2442ded1ea33ca1a4ec9a78cd161a7d5557a78b1a97e7d92065c'
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8443
              protocol: TCP
          resources: {}
          volumeMounts:
            - name: application-config
              readOnly: true
              mountPath: /deployments/config
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
status:
  observedGeneration: 47
  replicas: 1
  updatedReplicas: 1
  unavailableReplicas: 1
  conditions:
    - type: Progressing
      status: 'True'
      lastUpdateTime: '2025-04-15T01:24:11Z'
      lastTransitionTime: '2025-04-14T04:25:46Z'
      reason: NewReplicaSetAvailable
      message: ReplicaSet "kwsp-6b85cc55b7" has successfully progressed.
    - type: Available
      status: 'False'
      lastUpdateTime: '2025-04-15T02:40:08Z'
      lastTransitionTime: '2025-04-15T02:40:08Z'
      reason: MinimumReplicasUnavailable
      message: Deployment does not have minimum availability.

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: application-properties
  namespace: kwsp-apps
  uid: 3719a74e-6981-46e1-b6d2-75e7ad75b893
  resourceVersion: '183125'
  creationTimestamp: '2025-04-14T04:32:22Z'
  managedFields:
    - manager: kubectl-create
      operation: Update
      apiVersion: v1
      time: '2025-04-14T04:32:22Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:data': {}
    - manager: Mozilla
      operation: Update
      apiVersion: v1
      time: '2025-04-14T10:31:54Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:data':
          'f:application.properties': {}
data:
  application.properties: |+
    spring.application.name=poc
    # MySQL DataSource Configuration
    spring.datasource.url=jdbc:postgresql://postgresql.epf-postgrsql-poc.svc.cluster.local:5432/sampledb
    spring.datasource.username=userGQ7
    spring.datasource.password=password
    spring.jpa.hibernate.ddl-auto=update

    # Cache Configuration
    spring.cache.type=infinispan
    spring.cache.infinispan.config=infinispan.xml
    spring.main.allow-bean-definition-overriding=true

    #Infinispan (Red Hat Data Grid) Configuration
    infinispan.client.hotrod.server=epf-datagrid-poc.datagrid.svc.cluster.local
    infinispan.client.hotrod.port=11222
    infinispan.client.hotrod.client_intelligence=BASIC

    # Authentication
    infinispan.client.hotrod.use_auth=false
    infinispan.client.hotrod.realm=default
    infinispan.client.hotrod.auth_username=developer
    infinispan.client.hotrod.auth_password=tYxtberWYosXk9aY
    infinispan.client.hotrod.sasl_mechanism=DIGEST-MD5
    infinispan.client.hotrod.sni_host_name=epf-datagrid-poc-external-datagrid.apps-crc.testing

    infinispan.client.hotrod.trust_store_path=/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
    infinispan.client.hotrod.trust_store_type=pem


    # Spring Session Configuration
    spring.session.store-type=infinispan
    infinispan.remote.proto-schemas=session.proto

    springdoc.api-docs.enabled=true
    springdoc.swagger-ui.enabled=true

    logging.level.org.hibernate.SQL=DEBUG
    logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
    logging.level.org.springframework.jdbc.datasource.DataSourceUtils=DEBUG

    spring.servlet.multipart.enabled=true
    spring.servlet.multipart.max-file-size=10MB
    spring.servlet.multipart.max-request-size=10MB

----
session.proto: |-
    syntax = "proto3";

    package org.springframework.session.data.infinispan;

    message SpringSession {
      string id = 1;
      int64 creationTime = 2;
      int64 lastAccessedTime = 3;
      int64 maxInactiveInterval = 4;
      map<string, string> sessionAttributes = 5;
    }
  user.proto: |-
    syntax = "proto3";

    package com.kwsp.poc;

    message User {
      int32 id = 1;
      string email = 2;
      string name = 3;
      int32 version = 4;
    }
---
upload.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Upload Image</title>
    </head>
    <body>
      <h2>Upload an Image</h2>
      <form id="imageUploadForm" enctype="multipart/form-data" method="POST" action="/upload/image">
        <input type="file" id="image" name="image" accept="image/*" required />
        <button type="submit">Upload</button>
      </form>

      <script>
        const form = document.getElementById("imageUploadForm");
        form.onsubmit = async function (event) {
          event.preventDefault();
          const formData = new FormData(form);
          const response = await fetch("/upload/image", {
            method: "POST",
            body: formData,
          });
          const result = await response.json();
          alert(result.message);
        };
      </script>
    </body>
    </html>
---
infinispan.xml: |-
    <infinispan xmlns="urn:infinispan:config:14.0">
       
        <cache-container default-cache="default">
            <local-cache name="default">
                <memory>
                    <heap size="1000" />
                </memory>
                <expiration lifespan="60000" max-idle="30000" />
            </local-cache>
        </cache-container>
      
        
        <cache-container default-cache="sessions">
        <distributed-cache name="sessions" mode="SYNC">
            <encoding>
                <key media-type="application/x-java-object"/>
                <value media-type="application/x-java-object"/>
            </encoding>
        </distributed-cache>
    </cache-container>




    </infinispan>
---
apiVersion: infinispan.org/v2alpha1
kind: Cache
metadata:
  generateName: users-cache-
  annotations:
    infinispan.org/listener-generation: '1'
  resourceVersion: '76688'
  name: users-cache-b85rv
  uid: d6325371-4ce9-48fa-8007-f7e7a6338de3
  creationTimestamp: '2025-04-14T02:15:55Z'
  generation: 1
  managedFields:
    - apiVersion: infinispan.org/v2alpha1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:infinispan.org/listener-generation': {}
          'f:finalizers':
            .: {}
            'v:"finalizer.infinispan.org"': {}
          'f:generateName': {}
          'f:ownerReferences':
            .: {}
            'k:{"uid":"4f875f7f-b960-4480-b6cd-e3d92ae3713e"}': {}
        'f:spec':
          .: {}
          'f:clusterName': {}
          'f:name': {}
          'f:template': {}
      manager: infinispan-operator
      operation: Update
      time: '2025-04-14T02:15:55Z'
    - apiVersion: infinispan.org/v2alpha1
      fieldsType: FieldsV1
      fieldsV1:
        'f:status':
          .: {}
          'f:conditions': {}
      manager: infinispan-operator
      operation: Update
      subresource: status
      time: '2025-04-14T02:15:55Z'
  namespace: datagrid
  ownerReferences:
    - apiVersion: infinispan.org/v1
      kind: Infinispan
      name: epf-datagrid-poc
      uid: 4f875f7f-b960-4480-b6cd-e3d92ae3713e
  finalizers:
    - finalizer.infinispan.org
spec:
  clusterName: epf-datagrid-poc
  name: users-cache
  template: |
    distributedCache: 
      owners: "2"
      mode: "SYNC"
      statistics: "true"
      encoding: 
        mediaType: "application/json"
  updates:
    strategy: retain
status:
  conditions:
    - status: 'True'
      type: Ready

---
kwsp-postgresql-kwsp-postgresql-poc.apps.cluster-b5hhq.b5hhq.sandbox1851.opentlc.com
